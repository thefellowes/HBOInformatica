setwd("C:/Users/Marco/Desktop/HBO informatica/Analytics/Opgave 2")
telcotrain = read.csv('telcotrain.csv')
telcotrain$X <- NULL
telcotrain$ZIP <- NULL
str(telcotrain)
table(telcotrain$Churn)
install.packages("caTools")
library(caTools)
churnYes = subset(telcotrain, Churn == "YES")
churnNo = subset(telcotrain, Churn == "NO")
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TEC + TECH + TNM + TNC + TNCH + TIM + TIC + TICH + CSC, data=churnYes, family=binomial)
summary(glmChurn)
summary(telcotrain$Churn)
plot(telcotrain$Churn)
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TEC + TECH + TNM + TNC + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary glmChurn
View(glmChurn)
summary(glmChurn)
telcotrain%TEC <- NULL
telcotrain$TEC <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNC + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TNC <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TIM <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TDM <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TNCH <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TDCH + TEM + TECH + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TeCH <- NULL
telcotrain$TECH <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TDCH + TEM + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$ACL <- NULL
glmChurn = glm(Churn ~ + IP + VMP + NVM + TDC + TDCH + TEM + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
glmChurn = glm(Churn ~ IP + VMP + NVM + TDC + TDCH + TEM + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TDC <- NULL
glmChurn = glm(Churn ~ IP + VMP + NVM + TDCH + TEM + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain = read.csv('telcotrain.csv')
telcotrain$X <- NULL
telcotrain$ZIP <- NULL
#install.packages("caTools")
#library(caTools)
churnYes = subset(telcotrain, Churn == "YES")
churnNo = subset(telcotrain, Churn == "NO")
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TEC + TECH + TNM + TNC + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TEC <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNC + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TNC <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TIM <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TDM <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TDCH + TEM + TECH + TNM + TNCH + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TNCH <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TEM + TECH + TNM + TIC + TICH + CSC, data=telcotrain, family=binomial)
summary(glmChurn)
telcotrain$TECH <- NULL
glmChurn = glm(Churn ~ ACL + IP + VMP + NVM + TDC + TEM + TNM + TNCH + TIC + TICH + CSC, data=telcotrain, family=binomial)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix = function(model, variable, threshold){ pred = predict(mode, type="response")table(variable, pred > threshold)}
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix(telcotrain, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix(telcotrain, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix(telcotrainLog, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix(glmChurn, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
table(variable, pred > threshold)
}
confusionMatrix(telcotrain, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
conMatrix = table(variable, pred > threshold)
sens = conMatrix["YES", "TRUE"]/(conMatrix["YES", "TRUE"] + conMatrix["YES", "FALSE"])
spec = conMatrix["NO","FALSE"]/(conMatrix["NO","FALSE"] + conMatrix["NO","TRUE"])
acc = (conMatrix["NO","FALSE"] + conMatrix["YES","TRUE"])/(conMatrix["NO","TRUE"] + conMatrix["YES","TRUE"] + conMatrix["NO","FALSE"] + conMatrix["YES","FALSE"])
cat("\nsensitivity: ",sens,"\nspecificity: ",spec,"\naccuracy: ",acc,"\nconfusion matrix: ",print(conMatrix))
}
confusionMatrix(telcotrain, telcotrain$Churn, 0.1)
confusionMatrix = function(model, variable, threshold){
pred = predict(mode, type="response")
conMatrix = table(variable, pred > threshold)
sens = conMatrix["YES", "TRUE"]/(conMatrix["YES", "TRUE"] + conMatrix["YES", "FALSE"])
spec = conMatrix["NO","FALSE"]/(conMatrix["NO","FALSE"] + conMatrix["NO","TRUE"])
acc = (conMatrix["NO","FALSE"] + conMatrix["YES","TRUE"])/(conMatrix["NO","TRUE"] + conMatrix["YES","TRUE"] + conMatrix["NO","FALSE"] + conMatrix["YES","FALSE"])
cat("\nsensitivity: ",sens,"\nspecificity: ",spec,"\naccuracy: ",acc,"\nconfusion matrix: ",print(conMatrix))
}
confusionMatrix(telcotrain, telcotrain$Churn, 0.1)
